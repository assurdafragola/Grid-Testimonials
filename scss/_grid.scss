.container {
    width: 100%;
    max-width: $width-desktop;
    min-height: 95vh;
    align-content: center;
    margin: 0 auto; //aby element był na środku
    margin-bottom: 20px;
    // padding: 165px;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr;
    grid-template-rows: [start] auto [middle] auto [end];

    //The gutters are only created between the columns/rows, not on the outer edges.
    column-gap: 30px;
    row-gap: 23px;

    // justify-items: start;//aligns all items inside a cell along the inline (row) axis
    // align-items: start; //aligns all items inside a cell along the block (column) axis
    // place-items: start; //both justify and align, not all browsers support

    grid-auto-flow: row; // read more!
 
    //If the total size of your grid < the size of its grid container. 
    //(if all grid items are sized with non-flexible units like px). 
    // => 
    // [align/justify/place]-content: start | end | center | stretch | space-around | space-between | space-evenly;
    @include phone {
        height: auto;
        display: flex;
        flex-direction: column;
        margin-top: 80px
    };
    .testimonial {
        height: auto;
        box-shadow: none;
        max-width: 86vw;
    }
};



//Items can overlap each other. You can use z-index to control their stacking order.
@mixin position ($col_start, $col_end, $row_start, $row_end) {
    grid-column-start: $col_start;
    grid-column-end: $col_end;
    grid-row-start: $row_start;
    grid-row-end: $row_end;

    // justify-self: start; //aligns item inside a cell along the inline (row) axis
    // align-self: start; //aligns item inside a cell along the block (column) axis
    // place-self: start; //both justify and align, not all browsers support

    width: 100%;
    height: 100%;

};

.testimonial1 {
    @include position(1, 3, start, middle);
};

.testimonial2 {
    @include position(3, 4, start, middle)
};

.testimonial3 {
    @include position(1, 2, middle, end)
};

.testimonial4 {
    @include position(2, 4, middle, end)
};

.testimonial5 {
    @include position(4, 5, start, end)
};





//Fluid width columns that break into more or less columns as space is available, with no media queries!

.grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    /* This is better for small screens, once min() is better supported */
    /* grid-template-columns: repeat(auto-fill, minmax(min(200px, 100%), 1fr)); */
    grid-gap: 1rem;
    /* This is the standardized property now, but has slightly less support */
    /* gap: 1rem */
};


//other grid possibilities

//AREA
.grid_area_container {
    width: 100%;
    max-width: $width-desktop;

    display: grid;
    grid-template-columns: 100px 1fr 1fr 100px;
    grid-template-rows: auto;

    grid-template-areas: 
        "header header header header"
        ". main main ." // "." means empty cell
        "footer footer footer footer";
};


.grid_area_item_1 {
    grid-area: header;
};

.grid_area_item_2 {
    grid-area: main;
};

.grid_area_item_3 {
    grid-area: footer;
};

//SHORTHEAND

.grid {
    grid: 
        [row1-start] "header header header" 25px [row1-end]
        [row3-start] ". main ." 1fr [row3-end]
        [row2-start] "footer footer footer" 25px [row2-end]
        / auto 500px auto;
}

